#!/bin/bash

# Meant to be run in a LiveCD
# Only meant for GPT/UEFI systems

MNT=/mnt

arch_chroot() {
  arch-chroot "$MNT" /bin/bash -c "${1}"
}

if [[ $EUID != 0 ]]; then
  printf "only root should run this script\n"
  exit 1
fi

# ------ disk stuff ------
read -ep "Which drive to gdisk? (/dev/sd[a-z]): " drive
read -ep "Root partition? (/dev/sd[a-z][1-9]): " root_part
read -ep "Boot partition? (/dev/sd[a-z][1-9]): " boot_part
read -ep "New boot partition? (y/n): " boot_new

lsblk
cat << EOF

Boot drive:
  efi code = ef00
  efi partition size = 512M (or smaller)
  efi mount to /boot

EOF

gdisk "$drive"
mkfs.ext4 "$root_part"
mount "$root_part" "$MNT"
mkdir "$MNT"/boot
[[ "$boot_new" == "y" ]] && mkfs.vfat -F32 $boot_part
mount "$boot_part" "$MNT"/boot

# ------ installation ------
read -ep "Enter hostname: " hostname
read -ep "Need wifi (y/n): " wifi

pacstrap "$MNT" base
arch_chroot "pacman -Syu base-devel gummiboot git"

if [[ "$wifi" == "y" ]]; then
  arch_chroot "pacman -Syu iw wpa_supplicant wpa_actiond dialog"
fi

# create fstab
genfstab -p "$MNT" >> "$MNT"/etc/fstab

# symlink from /usr/share/zoneinfo/* to /etc/localtime
ln -s "$MNT"/usr/share/zoneinfo/America/Indianapolis "$MNT"/etc/localtime

# create locale.conf
echo LANG="en_US.UTF-8" > "$MNT"/etc/locale.conf
echo LC_COLLATE="C" >> "$MNT"/etc/locale.conf
echo LC_TIME="en_US.UTF-8" >> "$MNT"/etc/locale.conf

# locale stuff
echo "en_US.UTF-8 UTF-8" >> "$MNT"/etc/locale.gen
arch_chroot "locale-gen"

# set hostname
echo "$hostname" > "$MNT"/etc/hostname

# edit mkinitcpio (add ahci sd_mod ext4 to MODULES, systemd fsck for HOOKS)
vi "$MNT"/etc/mkinitcpio.conf
arch_chroot "mkinitcpio -p linux"

# edit settings (add discard for ssd)
vi "$MNT"/etc/fstab

# set bootloader
arch_chroot "gummiboot install"

# it will probably fail to create the entry
if [[ -f "$MNT/boot/loader/entries/arch.conf" ]]; then
  echo "looks like entry was created"
else
  touch "$MNT"/boot/loader/entries/arch.conf
  echo title   Arch Linux >> "$MNT"/boot/loader/entries/arch.conf
  echo linux   /vmlinuz-linux >> "$MNT"/boot/loader/entries/arch.conf
  echo initrd  /initramfs-linux.img >> "$MNT"/boot/loader/entries/arch.conf
  echo options root=$ROOT_DRIVE rw quiet >> "$MNT"/boot/loader/entries/arch.conf
fi

# set root passwd
arch_chroot "passwd"

# unmount and finish!
umount "$MNT/boot" "$MNT"
echo "You're done! reboot into disk. (systemctl reboot)"
