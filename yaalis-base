#!/bin/bash

# Meant to be run in a LiveCD
# Only meant for GPT/UEFI systems

MNT=/mnt

arch_chroot() {
  arch-chroot "$MNT" /bin/bash -c "${1}"
}

if [[ $EUID != 0 ]]; then
  printf "only root should run this script\n"
  exit 1
fi

# ------ disk stuff ------
lsblk
cat << EOF

Boot drive:
  efi code = ef00
  efi partition size = 512M (or smaller)
  efi mount to /boot

EOF

read -ep "Which drive to gdisk: " drive
read -ep "EFI (y/n): " efi
gdisk "$drive"

lsblk
if [[ "$efi" == "y" ]]; then
  read -ep "Boot partition: " boot_part
  read -ep "Root partition: " root_part
  read -ep "New boot partition? (y/n): " boot_new
  mkfs.ext4 "$root_part"
  mount "$root_part" "$MNT"
  mkdir "$MNT"/boot
  [[ "$boot_new" == "y" ]] && mkfs.vfat -F32 $boot_part
  mount "$boot_part" "$MNT"/boot
else
  # only 1 partition for non-efi systems
  read -ep "Partition: " main_part
  mkfs.ext4 "$main_part"
  mount "$main_part" "$MNT"
fi

# ------ package installation ------
read -ep "Enter hostname: " hostname
read -ep "Need wifi (y/n): " wifi

pacstrap "$MNT" base
arch_chroot "pacman -Syu --noconfirm base-devel git"
[[ "$wifi" == "y" ]] && arch_chroot "pacman -S --noconfirm iw wpa_supplicant wpa_actiond dialog"

if [[ "$efi" == "y" ]]; then
  arch_chroot "pacman -S --noconfirm gummiboot"
else
  arch_chroot "pacman -S --noconfirm grub"
fi

# ------ setting installation ------
# create fstab
genfstab -p "$MNT" >> "$MNT"/etc/fstab

ln -s "$MNT"/usr/share/zoneinfo/America/Indianapolis "$MNT"/etc/localtime
printf "Set timezone\n"

# create locale.conf
echo LANG="en_US.UTF-8" > "$MNT"/etc/locale.conf
echo LC_COLLATE="C" >> "$MNT"/etc/locale.conf
echo LC_TIME="en_US.UTF-8" >> "$MNT"/etc/locale.conf

# locale stuff
echo "en_US.UTF-8 UTF-8" >> "$MNT"/etc/locale.gen
arch_chroot "locale-gen"

# set hostname
echo "$hostname" > "$MNT"/etc/hostname
printf "Set hostname\n"

# set bootloader
if [[ "$efi" == "y" ]]; then
  arch_chroot "gummiboot install"

  # it will probably fail to create the entry
  if [[ -f "$MNT/boot/loader/entries/arch.conf" ]]; then
    echo "looks like entry was created"
  else
    touch "$MNT"/boot/loader/entries/arch.conf
    echo title   Arch Linux >> "$MNT"/boot/loader/entries/arch.conf
    echo linux   /vmlinuz-linux >> "$MNT"/boot/loader/entries/arch.conf
    echo initrd  /initramfs-linux.img >> "$MNT"/boot/loader/entries/arch.conf
    echo options root=$ROOT_DRIVE rw quiet >> "$MNT"/boot/loader/entries/arch.conf
    printf "Created entry\n"
  fi
else
  arch_chroot "grub-install --target=i386-pc --recheck --debug $main_part"
  arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
fi

# set root passwd
arch_chroot "passwd"

# ------ finishing installation ------
# edit mkinitcpio (add ahci sd_mod ext4 to MODULES, systemd fsck for HOOKS)
# edit mkinitcpio (virtio stuff: virtio, virtio_pci, virtio_blk, virtio_net, and virtio_ring)
vi "$MNT"/etc/mkinitcpio.conf
arch_chroot "mkinitcpio -p linux"

# edit settings (add discard for ssd)
vi "$MNT"/etc/fstab

# unmount and finish!
if [[ "$efi" == "y" ]] && umount "$MNT/boot"
umount "$MNT"
cat << EOF

"You're done! reboot into disk. (systemctl reboot)"

EOF
