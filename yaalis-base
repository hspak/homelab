#!/bin/bash

# Only meant for GPT/UEFI systems

if [[ $EUID != 0 ]]; then
  echo "only root should run this script"
  exit 1
fi

# disk stuff
lsblk
DRIVE=read -p "which drive to gdisk? (/dev/sd*)"
gdisk $DRIVE

# efi code = ef00
# efi partition size = 512M
# efi mount to /boot

#mount root and boot
ROOT_DRIVE=read -p "enter root drive (/dev/sd*#): "
BOOT_DRIVE=read -p "enter boot drive (/dev/sd*#): "

mkfs.vfat -F32 $BOOT_DRIVE
mkfs.ext4 $ROOT_DRIVE

mount $ROOT_DRIVE /mnt
mount $BOOT_DRIVE /mnt/boot

# install base
pacstrap /mnt base base-devel gummiboot git iw wpa_supplicant wpa_actiond dialog

# genfstab
genfstab -p /mnt >> /mnt/etc/fstab

# mount 
arch-chroot /mnt

# symlink from /usr/share/zoneinfo/* to /etc/localtime

# locale stuff
echo en_US.UTF-8 UTF-8 >> /etc/locale.gen
echo ko_KR.UTF-8 UTF-8 >> /etc/locale.gen
locale-gen

# create locale.conf
echo LANG="en_US.UTF-8" > /etc/locale.conf
echo LC_COLLATE="C" >> /etc/locale.conf
echo LC_TIME="en_US.UTF-8" >> /etc/locale.conf

# set hostname
HOSTNAME=read -p "enter hostname: "
echo $HOSTNAME > /etc/hostname

# edit mkinitcpio
vi /etc/mkinitcpio.conf
mkinitcpio -p linux

# edit settings
vi /etc/fstab

# set bootloader
gummiboot install

# it will probably fail to create the entry
if [[ "$(ls -A "$target")" ]]; then
  echo "looks like entry was created"
else
  touch /boot/loader/entries/arch.conf
  echo title   Arch Linux >> /boot/loader/entries/arch.conf
  echo linux   /vmlinuz-linux >> /boot/loader/entries/arch.conf
  echo initrd  /initramfs-linux.img >> /boot/loader/entries/arch.conf
  echo options root=$ROOT_DRIVE rw >> /boot/loader/entries/arch.conf
fi

# set root passwd
passwd

echo "You're done! reboot into disk. (systemctl reboot)"
