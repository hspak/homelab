#!/bin/bash
#
# Meant to be run in a LiveCD/USB/etc.

MNT=/mnt

arch_chroot() {
  arch-chroot "$MNT" /bin/bash -c "${1}"
}

as_user() {
  user=$1
  cmd=$2
  sudo -u $user $cmd
}

if [[ $EUID != 0 ]]; then
  printf "only root should run this script\n"
  exit 1
fi

# ------ disk stuff ------
lsblk
read -ep "Which drive to install root: " drive
read -ep "Enter hostname: " hostname
read -ep "Enter username: " username

# this needs to be run separately because sgdisk will
# get the remaining space for the old partition layout
sgdisk -o $drive

sgdisk -n 1:2048:526336 -n 2:528384:$(sgdisk -E $drive) -t 1:EF00 -t 2:8300 $drive
boot_part="${drive}1"
root_part="${drive}2"
sgdisk -p $drive
mkfs.ext4 -F "$root_part"
mount "$root_part" "$MNT"
mkdir "$MNT"/boot
mkfs.vfat -F32 $boot_part
mount "$boot_part" "$MNT"/boot

# ------ package installation ------
vim /etc/pacman.d/mirrorlist
pacstrap "$MNT" base base-devel pkgfile zsh gnome sudo iw wpa_supplicant gdm

# ------ setting installation ------
genfstab -p "$MNT" >> "$MNT"/etc/fstab

ln -sf "$MNT"/usr/share/zoneinfo/America/Los_Angeles "$MNT"/etc/localtime
printf "Set timezone\n"

# create locale.conf
echo LANG="en_US.UTF-8" > "$MNT"/etc/locale.conf

# locale stuff
echo "en_US.UTF-8 UTF-8" >> "$MNT"/etc/locale.gen
arch_chroot "locale-gen"

# set hostname
echo "$hostname" > "$MNT"/etc/hostname
arch_chroot "hostnamectl set-hostname $hostname"
printf "Set hostname\n"

# set bootloader
arch_chroot "bootctl --path=esp install"

# it will probably fail to create the entry
if [[ -f "$MNT/boot/loader/entries/arch.conf" ]]; then
  echo "looks like entry was created"
else
  touch "$MNT"/boot/loader/entries/arch.conf
  echo title  Arch Linux >> "$MNT"/boot/loader/entries/arch.conf
  echo linux  /vmlinuz-linux >> "$MNT"/boot/loader/entries/arch.conf
  echo initrd /intel-ucode.img >> "$MNT"/boot/loader/entries/arch.conf
  echo initrd /initramfs-linux.img >> "$MNT"/boot/loader/entries/arch.conf
  # TODO: use UUID
  echo options root=$root_part rw quiet >> "$MNT"/boot/loader/entries/arch.conf
  printf "Created entry\n"
fi

# ------ finishing installation ------
vi "$MNT"/etc/fstab
vi "$MNT"/etc/makepkg.conf
# edit mkinitcpio (add ahci sd_mod ext4 to MODULES, systemd fsck for HOOKS)
# edit mkinitcpio (virtio stuff: virtio, virtio_pci, virtio_blk, virtio_net, and virtio_ring)
vi "$MNT"/etc/mkinitcpio.conf
arch_chroot "mkinitcpio -p linux"

arch_chroot "visudo"
arch_chroot "passwd"

# ------ user creation ------
echo "Creating user $username..."
arch_chroot "useradd -m -g users -G wheel,adm,systemd-journal -s /usr/bin/zsh $username"
arch_chroot "passwd $username"

# ------ at least install cower ------
mkdir /mnt/home/$username/tmp
curl https://aur.archlinux.org/packages/co/cower/PKGBUILD > /mnt/home/$username/tmp/PKGBUILD
arch_chroot "chown -R $username:users /home/$username/tmp"
arch_chroot "su $username -c 'cd ~/tmp && makepkg --noconfirm -sic'"
rm -r /mnt/home/$username/tmp

# ------ install, unmount and finish! ------
vim "$MNT/etc/pacman.d/mirrorlist"
arch_chroot "pacman -Syy"

umount "$MNT/boot"
umount "$MNT"

cat << EOF

"You're done! reboot into disk. (systemctl reboot)"

EOF
